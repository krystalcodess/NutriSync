pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Pull the project code from the GitHub repository
                git 'https://github.com/krystalcodess/NutriSync.git'
            }
        }

        stage('Build') {
            steps {
                // Build the Docker image for the application
                sh 'docker build -t nutrisync .'
            }
        }

        stage('Test') {
            steps {
                // Set up a Python virtual environment and run the tests
                sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install -r requirements.txt
                    pytest
                '''
            }
        }

        stage('Code Quality') {
            steps {
                // Run SonarQube for code quality analysis
                withSonarQubeEnv('SonarQube') {
                    sh 'sonar-scanner'
                }
            }
        }

        stage('Deploy to Test Environment') {
            steps {
                sshagent(['SSH_Jenkins_Key']) {
                    // Copy files excluding 'venv'
                    sh '''
                        scp -o StrictHostKeyChecking=no -r /var/lib/jenkins/workspace/Automated_Pipeline/README.md \
                        /var/lib/jenkins/workspace/Automated_Pipeline/test.txt \
                        /var/lib/jenkins/workspace/Automated_Pipeline/text.txt \
                        /var/lib/jenkins/workspace/Automated_Pipeline/webfiles \
                        ubuntu@52.54.220.19:~/webfiles/
                    '''

                    // SSH into the remote server and set up virtual environment
                    sh '''
                        ssh -o StrictHostKeyChecking=no ubuntu@52.54.220.19 <<EOF
                            cd ~/webfiles/
                            python3 -m venv venv
                            source venv/bin/activate
                            pip install -r requirements.txt
                        EOF
                    '''
                }

                // Deploy the Docker container to the test environment
                sh 'docker rm -f NutriSync-Website || true'
                sh 'docker run -d -p 8085:80 --name=NutriSync-Website nutrisync'
            }
        }

        stage('Monitoring and Alerting') {
            steps {
                // Placeholder for monitoring setup
                echo 'Monitoring setup placeholder'
            }
        }
    }

    post {
        always {
            // Clean up unused Docker images and containers
            sh 'docker system prune -f'
            echo 'Pipeline completed.'
        }
        success {
            echo 'Build, test, and deployment succeeded!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}

